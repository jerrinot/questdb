variables:
  table_name: "sensor_data"

tests:
  - name: Insert and Select Test
    description: Test inserting and selecting data.
    prepare:
      - action: execute
        query: "CREATE TABLE ${table_name} (id INT, temperature DOUBLE, timestamp timestamp);"
    steps:
      - loop:
          range:
            start: 1
            end: 10
          as: id
          steps:
            - action: execute
              query: "INSERT INTO ${table_name} (id, temperature, timestamp) VALUES ($[1], $[2], $[3]);"
              parameters:
                - value: "${id}"
                  type: "INT4"
                - value: "${id}.5"
                  type: "FLOAT8"
                - value: "2023-10-01T10:00:00.000000Z"
                  type: "TIMESTAMP"
              expect:
                result: "INSERT 0 1"
      - action: query
        query: "SELECT 1, COUNT(*) FROM ${table_name};"
        expect:
          result:
            - [ 1, 10 ]
      - action: query all rows
        query: "SELECT id, temperature, timestamp FROM ${table_name};"
        expect:
          result_contains:
            - [ 1, 1.5, "2023-10-01T10:00:00.000000Z" ]
            - [ 2, 2.5, "2023-10-01T10:00:00.000000Z" ]
            - [ 3, 3.5, "2023-10-01T10:00:00.000000Z" ]
            - [ 4, 4.5, "2023-10-01T10:00:00.000000Z" ]
            - [ 5, 5.5, "2023-10-01T10:00:00.000000Z" ]
      - action: truncate table
        query: "truncate table ${table_name};"
        expect:
          result: "OK"
      - action: query truncated table
        query: "SELECT COUNT(*) FROM ${table_name};"
        expect:
          result:
            - [ 0 ]
    teardown:
      - action: execute
        query: "DROP TABLE IF EXISTS ${table_name};"
  - name: Smoke Test
    description: Testing another test-case inside the same file
    iterations: 2
    steps:
      - action: query truncated table
        query: "SELECT x FROM long_sequence(5)"
        expect:
          result:
            - [ 1 ]
            - [ 2 ]
            - [ 3 ]
            - [ 4 ]
            - [ 5 ]
  - name: Parquet test
    description: This test uses the builtin Parquet demo data
    steps:
      - action: query
        query: "SELECT * FROM read_parquet('trades.parquet') WHERE side = $[1];"
        parameters:
          - value: "buy"
            type: "VARCHAR"
        expect:
          result_contains:
            - [ 'BTC-USD', 'buy', 66991.56, 0.00014933, '2024-07-26T07:52:48.243272Z' ]
  - name: Large Result Set test
    description: Fetches a large result set
    iterations: 2
    prepare:
      - action: execute
        query: "CREATE TABLE ${table_name} as (SELECT x, x::varchar FROM long_sequence(1000000));"
    steps:
      - action: query
        query: "SELECT 0, * FROM ${table_name};"
        expect:
          result_contains:
            - [ 0, 1, "1" ]
            - [ 0, 1000000, "1000000" ]
    teardown:
      - action: execute
        query: "DROP TABLE IF EXISTS ${table_name};"
